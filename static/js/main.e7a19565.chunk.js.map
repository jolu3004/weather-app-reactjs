{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACC,mCADDA,EAEE,2CA0EOC,MAvEf,WACE,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KA+BA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAO,WAAuB,MAA3G,SAEE,iCACE,qBAAKF,UAAW,aAAhB,SACE,uBACAG,KAAM,OACNH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAxCO,SAAAC,GACC,UAAVA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAsCa,oBAAhBlB,EAAQG,KACjB,gCAEE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAf,SArCU,SAACsB,GACnB,IAKIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC9E,YAAa,UAAW,WAAY,YAMjBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA0BHE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAG5C,SC1DEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e7a19565.chunk.js","sourcesContent":["import react,{useState} from \"react\";\n\nconst api ={\n  key: \"1ae5ae6a9a0cbb50f0dbce54873a87e7\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery]= useState('');\n  const [weather, setWeather]= useState({});\n\n  const search = evt =>{\n    if (evt.key===\"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res =>res.json())\n      .then(result =>{\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n\n    }\n  }\n\n  const dateBuilder = (d)=>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"];\n\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n\n\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16)  ? 'app warm' : 'app' ) : 'app'}>\n         \n      <main>\n        <div className =\"search-box\">\n          <input \n          type =\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search...\"\n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n          />\n          \n\n        </div>\n        {(typeof weather.main != \"undefined\") ?(\n        <div>\n\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name},{weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>  \n        ) : ('')}\n      </main>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}